test {
    jvmArgs '-ea', "-Xms${groovyJUnit_ms}", "-Xmx${groovyJUnit_mx}", "-XX:PermSize=${groovyJUnit_permSize}", "-XX:MaxPermSize=${groovyJUnit_maxPermSize}"
    def headless = System.properties['java.awt.headless']
    if (headless == 'true') {
        systemProperties 'java.awt.headless': 'true'
    }
    def testdb = System.properties['groovy.testdb.props']
    if (testdb) {
        systemProperties 'groovy.testdb.props': testdb
    }
    systemProperties 'apple.awt.UIElement': 'true', 'javadocAssertion.src.dir': './src/main'
    systemProperties 'gradle.home': gradle.gradleHomeDir // this is needed by the security.policy
    if (rootProject.hasProperty('indy') && (Boolean.valueOf(rootProject.indy))) {
        println 'adding indy target'
        systemProperties 'groovy.target.indy': true
    }
    classpath = files('src/test') + classpath
    scanForTestClasses = true
    ignoreFailures = false
    ext.resultText = ''
    excludes = getExcludesPattern()
//    includes = getIncludePattern()
    doLast {
        ant.delete {
            fileset(dir: '.', includes: '*.class')
        }
    }
}

boolean isRunningOnCI() {
    new File('.').absolutePath.contains('ci.codehaus.org')
}

logger.lifecycle "Detected ${isRunningOnCI() ? 'Continuous Integration environment' : 'development environment'}"

allprojects {
    test {
//        forkEvery = isRunningOnCI() ? 50 : 200
        forkEvery = 50
        maxParallelForks = isRunningOnCI() ? 1 : Runtime.runtime.availableProcessors()
//        maxParallelForks = 1
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }

    sourceSets {
        test {
            groovy {
                srcDirs += 'src/spec/test'
            }
        }
    }
}
tasks.addRule('Pattern: testSingle<Name> will test **/<Name>.class') { String taskName ->
    if (taskName.startsWith('testSingle')) {
        tasks.add(taskName).dependsOn(test)
        test.includes = ['**/' + taskName.substring(10) + '.class']
        test.outputs.upToDateWhen { false }
    }
}

def getExcludesPattern() {
    def list = [
        // groovy core and groovy test classes that shouldn't be considered as tests
        '**/GroovyTestCase*', '**/TestSupport*', '**/DummyTestDerivation*',

        // temporarily disable security test suite, see GRADLE-2170
        'groovy/security/SecurityTest.class'
    ]
    if (isJava15()) {
        list << '**/*VM6*'
    }
    if (!rootProject.useIndy()) {
        list += ['**/indy/*', '*Indy*']
    }
    logger.lifecycle("Excluding ${list}")

    list
}

/*
def getIncludePattern() {
    def baseInclude = [
        'UberTestCaseBugs.class',
        'UberTestCaseGroovySourceCodehausPackages.class',
        'UberTestCaseGroovySourceRootPackage.class',
        'UberTestCaseGroovySourceSubPackages.class',
        'UberTestCaseJavaSourceCodehausPackages.class',
        'UberTestCaseJavaSourceGroovyPackagesNonSecurity.class',
        'UberTestCaseTCK.class',
        // temporarily disable security test suite, see GRADLE-2170
        // 'UberTestCaseJavaSourceGroovyPackagesSecurity.class'
    ]
    if (System.properties['junit.network']) {
        baseInclude += ['groovy/grape*/
/*Test.class']
    }
    if (!isJava15()) {
        baseInclude += [
            'UberTestCaseGroovySourceSubPackages_VM6.class',
            'UberTestCaseGroovySourceCodehausPackages_VM6.class'
        ]
    }
    if (rootProject.hasProperty('indy') && (Boolean.valueOf(rootProject.indy))) {
        println 'adding indy include'
        baseInclude += [
            'UberTestCaseIndy.class'
        ]
    }
    baseInclude
}
*/
